{"name":"Todo-list","tagline":"","body":"Simple todo list on the force.com platform\r\n===========================================\r\n![force logo](http://www.force.com/common/assets/img/header-logo-update.png)\r\n\r\n# Steps To Create Application\r\n- Based on the TodoMVC App: http://todomvc.com/architecture-examples/knockoutjs/\r\n- Here is the code: https://github.com/addyosmani/todomvc/tree/gh-pages/architecture-examples/knockoutjs\r\n- Create a new developer org and assign the CEO role to the registered user\r\n- Create a new force.com site:\r\n\t- App Setup -> Develop -> Site -> New Site \r\n\t- Site Label: todo-list, Site Name: todo_list, Active: checked\r\n\t- Use the SiteLogin.page as the site home page\r\n\t- Enable the customer portal: Customize -> Customer Portal -> Settings -> Edit -> Enable -> Continue\r\n\t- Edit the customer portal, \r\n\t\t- Set the Administrator\r\n\t\t- Enable Self-Registration\r\n\t\t- Set New User Form URL to SiteRegister\r\n\t\t- Set the Default New User License and Default New User Profile to High Volume Customer Portal\r\n\t- Enable login for the site: App Setup -> Develop -> Site -> Login Settings -> Edit, set My Profile Page to MyProfilePage\r\n\r\n\r\n### Register a new user on the site:\r\n\t- Create a new account that all the registered site users will belong to. Call it TodoList Account\r\n\t- Copy the Id of the account and edit the SiteRegisterController to reference the account.\r\n\t- Register a new user by clicking the register link\r\n\t- Add the FirstName and LastName fields to SiteRegister.page and the SiteRegisterController:\r\n\r\n```java\r\n\tpublic String lastname {get; set;}\r\n\tpublic String firstname {get; set;}\r\n```\r\n \r\n```java\r\n     if(firstname == null || firstname.length() == 0){\r\n\t\tApexPages.Message msg = new ApexPages.Message(ApexPages.Severity.ERROR, 'Enter a first name');\r\n     \tApexPages.addMessage(msg);\r\n         return null;\r\n     }\r\n     if(lastname == null || lastname.length() == 0){\r\n\t\tApexPages.Message msg = new ApexPages.Message(ApexPages.Severity.ERROR, 'Enter a last name');\r\n     \tApexPages.addMessage(msg);\r\n         return null;\r\n     }\r\n     \r\n     User u = new User();\r\n     u.Username = username;\r\n     u.Email = email;\r\n     u.FirstName = firstname;\r\n     u.LastName = lastname;\r\n     u.CommunityNickname = communityNickname;\r\n``` \r\n\r\n\r\n```html\r\n <apex:panelGrid columns=\"2\" style=\"margin-top:1em;\">\r\n    <apex:outputLabel value=\"{!$Label.site.username}\" for=\"username\"/>\r\n    <apex:inputText required=\"true\" id=\"username\" value=\"{!username}\"/>\r\n    <apex:outputLabel value=\"First Name\" for=\"firstname\"/>\r\n    <apex:inputText required=\"true\" id=\"firstname\" value=\"{!firstname}\"/>\r\n    <apex:outputLabel value=\"Last Name\" for=\"lastname\"/>\r\n    <apex:inputText required=\"true\" id=\"lastname\" value=\"{!lastname}\"/>\r\n    <apex:outputLabel value=\"{!$Label.site.community_nickname}\" for=\"communityNickname\"/>\r\n    <apex:inputText required=\"true\" id=\"communityNickname\" value=\"{!communityNickname}\"/>\r\n    <apex:outputLabel value=\"{!$Label.site.email}\" for=\"email\"/>\r\n    <apex:inputText required=\"true\" id=\"email\" value=\"{!email}\"/>\r\n    <apex:outputLabel value=\"{!$Label.site.password}\" for=\"password\"/>\r\n    <apex:inputSecret id=\"password\" value=\"{!password}\"/>\r\n    <apex:outputLabel value=\"{!$Label.site.confirm_password}\" for=\"confirmPassword\"/>\r\n    <apex:inputSecret id=\"confirmPassword\" value=\"{!confirmPassword}\"/>\r\n    <apex:outputText value=\"\"/>\r\n    <apex:commandButton action=\"{!registerUser}\" value=\"{!$Label.site.submit}\" id=\"submit\"/>\r\n  </apex:panelGrid> \r\n```\r\n\r\n### Add some nCino styling\r\n\r\n- TODO: Modify the SiteSamples/SiteStyles.css static resource to contain bootstrap styles\r\n- Add the nCino logos in content/images to the SiteSamples static resource in the /img folder\r\n\t- nCinoLogo.gif\r\n\t- nCinoLogoBars.gif\r\n- Modify the generated SitePoweredBy.component to reference the nCino logo:\r\n\r\n```html\r\n<apex:outputLink value=\"http://www.ncino.com\"><apex:image url=\"{!URLFOR($Resource.SiteSamples, 'img/nCinoLogo.png')}\" height=\"55px\" styleClass=\"poweredByImage\"/></apex:outputLink>\r\n```\r\n\r\n- Search and remove all files in the project that contain:\r\n\r\n```html\r\n<apex:image url=\"{!URLFOR($Resource.SiteSamples, 'img/clock.png')}\"/>\r\n```\r\n\r\n- Modify the image in the SiteHeader.component:\r\n\r\n```html\r\n<apex:image url=\"{!URLFOR($Resource.SiteSamples, 'img/nCinoLogoBars.gif')}\" style=\"align: left;\" alt=\"nCino\" height=\"33\" title=\"nCino\"/>\r\n```\r\n\r\n### Include bootstrap and other web dependencies\r\n\r\n- Create the web library dependencies (can be found in content/web_libs):\r\n\t- Download jquery ui: http://jqueryui.com/download/\r\n\t- Download knockout: http://knockoutjs.com/downloads/knockout-2.2.1.js\r\n\t- Download knockout-mapping: https://raw.github.com/SteveSanderson/knockout.mapping/master/build/output/knockout.mapping-latest.js\r\n\t- Download knockout-validation: https://raw.github.com/ericmbarnard/Knockout-Validation/master/Dist/knockout.validation.js\r\n\t- Download underscore: http://underscorejs.org/underscore.js\r\n\t- Download director: https://raw.github.com/addyosmani/todomvc/gh-pages/architecture-examples/knockoutjs/components/director/build/director.js\r\n\t- Download TodoMvc: https://github.com/addyosmani/todomvc/tree/gh-pages/architecture-examples/knockoutjs/components/todomvc-common \r\n\t- Create a zip file from the contents: $ zip -r includes.zip * \r\n\t- Add the zip file as a static resource. Be sure to set the access level to public; call it includes\r\n\t- Create a new visualforce component that includes all the libaries; call it Includes.component:\r\n\t\r\n```html\r\n    <apex:component >\r\n         <script type=\"text/javascript\">\r\n            jQuery.noConflict();\r\n        </script>\r\n        <script src=\"/soap/ajax/27.0/connection.js\" type=\"text/javascript\"></script>\r\n        <script src=\"/soap/ajax/27.0/apex.js\" type=\"text/javascript\"></script>\r\n\r\n        <apex:includeScript value=\"{!URLFOR($Resource.includes, 'jquery-ui-1.10.2.custom/js/jquery-1.9.1.js')}\" />\r\n        <apex:includeScript value=\"{!URLFOR($Resource.includes, 'jquery-ui-1.10.2.custom/js/jquery-ui-1.10.2.custom.js')}\" />\r\n        <apex:stylesheet value=\"{!URLFOR($Resource.includes, 'jquery-ui-1.10.2.custom/css/redmond/jquery-ui-1.10.2.custom.css')}\" />\r\n\r\n        <apex:includeScript value=\"{!URLFOR($Resource.includes, 'underscore.js')}\" />\r\n        <apex:includeScript value=\"{!URLFOR($Resource.includes, 'knockout-2.2.1.js')}\" />\r\n        <apex:includeScript value=\"{!URLFOR($Resource.includes, 'knockout.mapping-latest.js')}\" />\r\n        <apex:includeScript value=\"{!URLFOR($Resource.includes, 'knockout.validation.js')}\" />\r\n\r\n        <apex:includeScript value=\"{!URLFOR($Resource.includes, 'bootstrap/js/bootstrap.js')}\" />\r\n        <apex:stylesheet value=\"{!URLFOR($Resource.includes, 'bootstrap/css/bootstrap.css')}\" />\r\n        <apex:stylesheet value=\"{!URLFOR($Resource.includes, 'bootstrap/css/bootstrap-responsive.css')}\" />\r\n\r\n        <apex:includeScript value=\"{!URLFOR($Resource.includes, 'todomvc-common/base.js')}\" />\r\n        <apex:stylesheet value=\"{!URLFOR($Resource.includes, 'todomvc-common/base.css')}\" />\r\n        <apex:includeScript value=\"{!URLFOR($Resource.includes, 'director.js')}\" />\r\n\r\n    </apex:component>\r\n```\r\n\r\n- Add this component to the SiteTemplate.page and wrap all headers in a bootstrap div navbar and move the hrs tags\r\n\r\n```html\r\n<apex:page showHeader=\"false\" id=\"SiteTemplate\">\r\n\t<c:Includes />\r\n  <apex:stylesheet value=\"{!URLFOR($Resource.SiteSamples, 'SiteStyles.css')}\"/>\r\n  <div class=\"navbar navbar-fixed-top\">\r\n  \t<div class=\"navbar-inner\">\r\n\t  <apex:insert name=\"header\">\r\n\t    <c:SiteHeader />\r\n\t  </apex:insert>\r\n\t</div>\r\n  </div>\r\n  <hr/>\r\n  <hr/>\r\n\t<div>\r\n  \t\t<apex:insert name=\"body\"/>\r\n  \t</div>\r\n  <apex:insert name=\"footer\">\r\n    <hr/>\r\n    <c:SiteFooter />\r\n    <site:googleAnalyticsTracking />\r\n  </apex:insert>\r\n</apex:page>\r\n```\r\n\r\n- Fix up the SiteLogin, ForgotPassord and SiteRegister header links in SiteHeader.component:\r\n\r\n```html\r\n\t\t<apex:outputLink value=\"SiteLogin\">{!$Label.site.login_button}</apex:outputLink>\r\n\t\t<apex:outputText value=\" | \"/>\r\n\t\t<apex:outputLink value=\"ForgotPassword\">{!$Label.site.forgot_your_password_q}</apex:outputLink>\r\n\t\t<apex:outputText value=\" | \" rendered=\"{!$Site.RegistrationEnabled}\"/>\r\n\t\t<apex:outputLink value=\"SiteRegister\" rendered=\"{!$Site.RegistrationEnabled}\">{!$Label.site.new_user_q}</apex:outputLink>\r\n\t  </apex:panelGroup>\r\n```\r\n\r\n### Add the main web page and port the TodoMVC knockout app\r\n\r\n- Create a site home page:\r\n\t- Create a new visualforce page, call it TodoList.page\r\n\t- Be sure to add: showHeader=\"false\" standardStylesheets=\"false\" since we want our own styling\r\n\t- Also set docType=\"html-5.0\" language=\"en\"\r\n\t- Modify the registerUser method of the SiteRegisterController & SiteLoginControllers to pass in the page URL of the TodoList.page to the login() call\r\n\t- Add the page to the site: App Setup -> Develop -> Sites -> Site visualforce pages -> Edit\r\n \r\n```html\r\n<apex:page showHeader=\"false\" standardStylesheets=\"false\" docType=\"html-5.0\" language=\"en\">\r\n\t<apex:composition template=\"{!$Site.Template}\">\r\n\t\t<apex:define name=\"body\">\r\n\t\t\t<div>\r\n\t\t\t\tinsert content here\r\n\t\t\t</div>\r\n\t\t</apex:define>\r\n\t</apex:composition>\r\n</apex:page>\r\n```\r\n\r\n```java\r\n\treturn Site.login(username, password, '/TodoList');\r\n```\r\n\r\n- Create a ToDo Component\r\n\t- Create a js file called app.js and upload it as a static resource. \r\n\t- Copy in the knockout code for the todo app.js; be sure to wrap it in jQuery(function(){}); to allow for a ready DOM\r\n\t- Inlcude the app.js script in the ToDo component\r\n\r\n```html\r\n<apex:includeScript value=\"{!URLFOR($Resource.app)}\" />\r\n```\r\n\r\n- Copy in todo html code into ToDo component\r\n\t- remove the base.css stylesheet include in the head tag\r\n\t- remove the js include tags at the bottom of the file\r\n\t- find autofocus and set it to autofocus=\"true\"\r\n\t- find all input and meta tags and be sure to end them\r\n\t- Modify the TodoList.page to include the Todo.component \r\n\t\r\n```html\r\n<apex:component>\r\n\t<head>\r\n\t\t<meta charset=\"utf-8\" />\r\n\t\t<meta content=\"IE=edge,chrome=1\" http-equiv=\"X-UA-Compatible\" />\r\n\t\t<title>Knockout.js • TodoMVC</title>\r\n\t</head>\r\n\t<body id=\"todolistapp\">\r\n\t\t<section id=\"todoapp\">\r\n\t\t\t<header id=\"header\">\r\n\t\t\t\t<h1>todos</h1>\r\n\t\t\t\t<input id=\"new-todo\" data-bind=\"value: current, valueUpdate: 'afterkeydown', enterKey: add\" placeholder=\"What needs to be done?\" autofocus=\"true\"/>\r\n\t\t\t</header>\r\n\t\t\t<section id=\"main\" data-bind=\"visible: todos().length\">\r\n\t\t\t\t<input id=\"toggle-all\" data-bind=\"checked: allCompleted\" type=\"checkbox\"/>\r\n\t\t\t\t<label for=\"toggle-all\">Mark all as complete</label>\r\n\t\t\t\t<ul id=\"todo-list\" data-bind=\"foreach: filteredTodos\">\r\n\t\t\t\t\t<li data-bind=\"css: { completed: completed, editing: editing }\">\r\n\t\t\t\t\t\t<div class=\"view\">\r\n\t\t\t\t\t\t\t<input class=\"toggle\" data-bind=\"checked: completed\" type=\"checkbox\"/>\r\n\t\t\t\t\t\t\t<label data-bind=\"text: title, event: { dblclick: $root.editItem }\"></label>\r\n\t\t\t\t\t\t\t<button class=\"destroy\" data-bind=\"click: $root.remove\"></button>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<input class=\"edit\" data-bind=\"value: title, valueUpdate: 'afterkeydown', enterKey: $root.stopEditing, selectAndFocus: editing, event: { blur: $root.stopEditing }\"/>\r\n\t\t\t\t\t</li>\r\n\t\t\t\t</ul>\r\n\t\t\t</section>\r\n\t\t\t<footer id=\"footer\" data-bind=\"visible: completedCount() || remainingCount()\">\r\n\t\t\t\t<span id=\"todo-count\">\r\n\t\t\t\t\t<strong data-bind=\"text: remainingCount\">0</strong>\r\n\t\t\t\t\t<span data-bind=\"text: getLabel( remainingCount )\"></span> left\r\n\t\t\t\t</span>\r\n\t\t\t\t<ul id=\"filters\">\r\n\t\t\t\t\t<li>\r\n\t\t\t\t\t\t<a data-bind=\"css: { selected: showMode() == 'all' }\" href=\"#/all\">All</a>\r\n\t\t\t\t\t</li>\r\n\t\t\t\t\t<li>\r\n\t\t\t\t\t\t<a data-bind=\"css: { selected: showMode() == 'active' }\" href=\"#/active\">Active</a>\r\n\t\t\t\t\t</li>\r\n\t\t\t\t\t<li>\r\n\t\t\t\t\t\t<a data-bind=\"css: { selected: showMode() == 'completed' }\" href=\"#/completed\">Completed</a>\r\n\t\t\t\t\t</li>\r\n\t\t\t\t</ul>\r\n\t\t\t\t<button id=\"clear-completed\" data-bind=\"visible: completedCount, click: removeCompleted\">\r\n\t\t\t\t\tClear completed (<span data-bind=\"text: completedCount\"></span>)\r\n\t\t\t\t</button>\r\n\t\t\t</footer>\r\n\t\t</section>\r\n\t\t<footer id=\"info\">\r\n\t\t\t<p>Double-click to edit a todo</p>\r\n\t\t\t<p>Original Knockout version from <a href=\"https://github.com/ashish01/knockoutjs-todos\">Ashish Sharma</a></p>\r\n\t\t\t<p>Rewritten to use Knockout 2.0 and standard template by <a href=\"http://knockmeout.net\">Ryan Niemeyer</a></p>\r\n\t\t\t<p>Patches/fixes for cross-browser compat: <a href=\"http://twitter.com/addyosmani\">Addy Osmani</a></p>\r\n\t\t\t<p>Part of <a href=\"http://todomvc.com\">TodoMVC</a></p>\r\n\t\t</footer>\r\n\t</body>\r\n\t<apex:includeScript value=\"{!URLFOR($Resource.app)}\" />\r\n</apex:component>\r\n```\r\n\r\n\r\n### Test the ported app:\r\n\r\n- Login as the user and test the basic todo list.\r\n\t- add some todo items\r\n\t- items are stored in a local cookie\r\n\t- log out and log back in\r\n\r\n### Enhance the app to persist todo item in salesforce\r\n\r\n- Create a database table (or sObject aka Schema-Object) in salesforce to save our data.\r\n\t- App Setup -> Create -> Objects -> New Custom Object\r\n\t- Call the object ToDo List, set the following fields (that corresponds with the Todo js model):\r\n\t  - Name: Autonumber\r\n\t  - Title: Text, Requried, 255\r\n\t  - Completed: Boolean \r\n- Create a POJO value object that contains all data required for the UI model (data structure matches the Todo js model):\r\n\r\n```java\r\n\tpublic with sharing class Todo {\r\n\t\tpublic String recordId;\r\n\t\tpublic String title;\r\n\t\tpublic Boolean completed;\r\n\t\tpublic Boolean editing;\r\n\t}\r\n```\r\n\r\n- Change the Todo js model to set the completed & recordId variables if they are not set:\r\n\r\n```js\r\n\tvar Todo = function (title, recordId, completed) {\r\n\t\tthis.recordId = ko.observable(recordId == null? '' : recordId);\r\n\t\tthis.title = ko.observable(title);\r\n\t\tthis.completed = ko.observable(completed == null? false: completed);\r\n\t\tthis.editing = ko.observable(false);\r\n\t};\r\n```\r\n\r\n- Modify the initialization of the self.todos observable array to set the additional constructor variable:\r\n\r\n```js\r\n\tself.todos = ko.observableArray(ko.utils.arrayMap(todos, function (todo) {\r\n\t\treturn new Todo(todo.title, todo.recordId, todo.completed);\r\n\t}));\r\n\r\n```\r\n\r\n- Create a APEX Remoting JS Service to CRUD the Todo list, call the class TodoListService.\r\n\t- Modify the Todo.component and set the controller attribute to TodoListService\r\n\t- add 2 @RemoteAction methods to this class: 1) getTodoList and 2) saveTodoList\r\n\t\r\n```java\r\n\tpublic with sharing class TodoListService {\r\n\t\t@RemoteAction\r\n\t\tpublic static Todo[] getTodoList(){\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\t@RemoteAction \r\n\t\tpublic static Todo[] saveTodoList(Todo[] todoList){\r\n\t\t\treturn null;\r\n\t\t}\r\n\t}\r\n```\r\n\r\n- Add the implementation for the TodoListService methods\r\n- the getTodoList() implementation is straight forward\r\n\t\r\n```java\r\n\t@RemoteAction\r\n\tpublic static Todo[] getTodoList(){\r\n\t\treturn retrieveTodoList();\r\n\t}\r\n\tprivate static Todo[] retrieveTodoList(){\r\n\t\tTodo[] todoList = new Todo[]{};\r\n\t\tToDo_List__c[] records = retrieveListFromDb(UserInfo.getUserId());\r\n\t\t\r\n\t\tfor(ToDo_List__c l : records){\r\n\t\t\tTodo t = new Todo();\r\n\t\t\tmapFromDbRecord(l, t);\r\n\t\t\ttodoList.add(t);\r\n\t\t}\r\n\t\treturn todoList;\r\n\t}\r\n\tprivate static void mapFromDbRecord(ToDo_List__c dbRecord, Todo t){\r\n\t\tt.recordId = dbRecord.Id;\r\n\t\tt.title = dbRecord.Title__c;\r\n\t\tt.completed = dbRecord.Completed__c;\r\n\t}\r\n\tprivate static ToDo_List__c[] retrieveListFromDb(Id userId){\r\n\t\treturn [\t\r\n\t\t\tSELECT \r\n\t\t\t\tId, \r\n\t\t\t\tTitle__c, \r\n\t\t\t\tCompleted__c\r\n\t\t\tFROM \r\n\t\t\t\tToDo_List__c\r\n\t\t\tWHERE\r\n\t\t\t\tOwnerId =: userId\r\n\t\t\tORDER BY CreatedDate ASC];\r\n\t}\r\n```\r\n- the saveTodoList() implementation is tricky:\r\n<pre>\r\n\tCruds the todo list by examining the recordId field of the Todo items in the following way:\r\n\t- if the recordId matches the record Id in the database then update the record\r\n\t- if the Todo item does not have a recordId then add it to the database\r\n\t- remove the remaining items in the list (that were not added/removed) \r\n</pre>\r\n\r\n```java\r\n\t@RemoteAction \r\n\tpublic static Todo[] saveTodoList(Todo[] todoList){\r\n\t\tsaveTodoListToDb(todoList);\r\n\t\treturn getTodoList();\r\n\t}\r\n\t/**\r\n\t* Cruds the todo list by examining the recordId field of the Todo items in the following way:\r\n\t* <ul>\r\n\t* <li>if the recordId matches the record Id in the database then update the record</li>\r\n\t* <li>if the Todo item does not have a recordId then add it to the database</li>\r\n\t* <li>Remove the remaining items in the list (that were not added/removed)</li>\r\n\t* </ul> \r\n\t*/\r\n\tprivate static void saveTodoListToDb(Todo[] todoList){\r\n\t\tToDo_List__c[] insertList = new ToDo_List__c[]{};\r\n\t\tToDo_List__c[] updateList = new ToDo_List__c[]{};\r\n\t\tToDo_List__c[] deleteList = new ToDo_List__c[]{};\r\n\t\t\r\n\t\t\r\n\t\tMap<Id,ToDo_List__c> records = new Map<Id,ToDo_List__c>(\r\n\t\t\tretrieveListFromDb(\r\n\t\t\tUserInfo.getUserId());\r\n\t\tfor(Integer i=todoList.size()-1;i>=0;i--){\r\n\t\t\tTodo t = todoList[i];\r\n\t\t\tif(t.recordId != null && t.recordId.length() > 0){\r\n\t\t\t\tToDo_List__c dbRecord = records.remove(t.recordId); // remove from list\r\n\t\t\t\tif(dbRecord != null){\r\n\t\t\t\t\tmapToDbRecord(t, dbRecord);\r\n\t\t\t\t\tupdateList.add(dbRecord);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tToDo_List__c newTodo = new ToDo_List__c();\r\n\t\t\t\tmapToDbRecord(t, newTodo);\r\n\t\t\t\tinsertList.add(newTodo);\r\n\t\t\t}\r\n\t\t}\r\n\t\tdeleteList.addAll(records.values());\r\n\r\n\t\tDatabase.insert(insertList);\r\n\t\tDatabase.update(updateList);\r\n\t\tDatabase.delete(deleteList);\r\n\t}\r\n\tprivate static void mapToDbRecord(Todo t, ToDo_List__c dbRecord){\r\n\t\tdbRecord.Title__c = t.title;\r\n\t\tdbRecord.Completed__c = t.completed;\r\n\t}\r\n```\r\n\r\n- Create testcases for CRUD operations\r\n- Create 2 new apex remoting js functions at the bottom of the ToDo.component that invoke the remote actions:\r\n\t\r\n```js\r\n\twindow.todo = {};\r\n\twindow.todo.loadTodoList = function(callback){\r\n\t\tVisualforce.remoting.Manager.invokeAction(\r\n\t\t\t'{!$RemoteAction.TodoListService.getTodoList}',\r\n\t\t\tfunction(result, event){\r\n\t\t\t\tif(event.type == 'exception'){\r\n\t\t\t\t\t alert('Your session has timed out.');\r\n\t\t\t\t}\r\n\t\t\t\tif(event.status){\r\n\t\t\t\t\tcallback.apply(this, [result]);\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tconsole.log('error');\r\n\t\t\t\t\tconsole.log(result);\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t{escape: true} );\r\n\t};\r\n\twindow.todo.persistTodoList = function(todos, callback){\r\n\t\tVisualforce.remoting.Manager.invokeAction(\r\n\t\t\t'{!$RemoteAction.TodoListService.saveTodoList}',\r\n\t\t\t_.map(ko.toJS(todos()), function(value, key, list){\r\n\t\t\t\treturn value;\r\n\t\t\t}),\r\n\t\t\tfunction(result, event){\r\n\t\t\t\tif(event.type == 'exception'){\r\n\t\t\t\t\t alert('Your session has timed out.');\r\n\t\t\t\t}\r\n\t\t\t\tif(event.status){\r\n\t\t\t\t\tcallback.apply(this, [result]);\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tconsole.log('error');\r\n\t\t\t\t\tconsole.log(result);\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t{escape: true} );\r\n\t};\r\n```\r\n- Modify the app.resource to load the data from the TodoListService:\r\n \r\n```js\r\n\twindow.todo.loadTodoList(function(todos){\r\n\t\t// bind a new instance of our view model to the page\r\n\t\tvar viewModel = new ViewModel(todos || []);\r\n\t\tko.applyBindings(viewModel);\r\n\t\r\n\t\t// set up filter routing\r\n\t\t/*jshint newcap:false */\r\n\t\tRouter({'/:filter': viewModel.showMode}).init();\r\n\t});\r\n```\r\n- Modify the app.resource to save and reload-rebind the data from the TodoListService:\r\n\r\n```js\r\n\t// internal computed observable that fires whenever anything changes in our todos\r\n\tko.computed(function () {\r\n\t\twindow.todo.persistTodoList(self.todos, function(todos){\r\n\t\t\t_.each(todos, function(element, index, list){\r\n\t\t\t\t_.each(self.todos(), function(innerElement, innerIndex, innerList){\r\n\t\t\t\t\tif(element.title == innerElement.title() &&\r\n\t\t\t\t\t\t\telement.recordId != innerElement.recordId()){\r\n\t\t\t\t\t\tinnerElement.recordId(element.recordId);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t});\r\n\t}).extend({\r\n\t\tthrottle: 500\r\n\t}); // save at most twice per second\r\n```\r\n\r\n### Test the app and observe the todos being saved to the database \r\n\r\n### Combine the Todo list with a salesforce contact: \r\n\r\n- Add a contact lookup column to the ToDo List database table\r\n- Modify the TodoListService to set this contact field for every new record.\r\n\t- The User table has column for ContactId\r\n- Modify the contact page layout to add the TodoList related list and add the relevant columns\r\n- At this point each todo list item is assigned to the contact that created the issue.\r\n\t- Let's add the ability to assign the todo list item to another user\r\n\t- Add a POJO to house the data\r\n\t\t\t\r\n```java\r\n\tpublic with sharing class TodoContact {\r\n\t\tpublic String recordId;\r\n\t\tpublic String name;\r\n\t}\r\n```\r\n- compose this in the Todo record:\r\n\t\t\t\r\n```java\r\n\tpublic with sharing class Todo {\r\n\t\tpublic String recordId;\r\n\t\tpublic String title;\r\n\t\tpublic Boolean completed;\r\n\t\tpublic Boolean editing;\r\n\t\tpublic TodoContact assignee;\r\n\t}\r\n```\r\n- add a new @RemoteAction to the TodoListService to retrieve all contacts\r\n\t\t\t\r\n```java\r\n\t@RemoteAction\r\n\tpublic static TodoContact[] getContacts(){\r\n\t\tTodoContact[] toReturn = new TodoContact[]{};\r\n\t\tContact[] contacts = [SELECT Id, Name FROM Contact];\r\n\t\tfor(Contact c : contacts){\r\n\t\t\tTodoContact tContact = new TodoContact();\r\n\t\t\ttContact.recordId = c.Id;\r\n\t\t\ttContact.name = c.Name;\r\n\t\t\ttoReturn.add(tContact);\r\n\t\t}\r\n\t\treturn toReturn;\r\n\t}\r\n```\r\n- Add a Apex Remoting function to invoke the service:\r\n\t\t\t\r\n```js\r\n\twindow.todo.loadContacts = function(callback){\r\n\t\tVisualforce.remoting.Manager.invokeAction(\r\n\t\t\t'{!$RemoteAction.TodoListService.getContacts}',\r\n\t\t\tfunction(result, event){\r\n\t\t\t\tif(event.type == 'exception'){\r\n\t\t\t\t\t alert('Your session has timed out.');\r\n\t\t\t\t}\r\n\t\t\t\tif(event.status){\r\n\t\t\t\t\tcallback.apply(this, [result]);\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tconsole.log('error');\r\n\t\t\t\t\tconsole.log(result);\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t{escape: true} );\r\n\t};\r\n```\r\n- Modify the TodoList service to load the contact id and name in the load from db call\r\n- Also, modify the mapFromDbRecord and mapToDbRecord methods to set the contact to the assignee it is set\r\n\t\t\t\r\n```java\r\n\tprivate static void mapToDbRecord(Todo t, ToDo_List__c dbRecord){\r\n\t\tdbRecord.Title__c = t.title;\r\n\t\tdbRecord.Completed__c = t.completed;\r\n\t\tdbRecord.Contact__c = t.assignee != null && \r\n\t\t\tt.assignee.recordId != null ? t.assignee.recordId : null;\r\n\t}\r\n\tprivate static void mapFromDbRecord(ToDo_List__c dbRecord, Todo t){\r\n\t\tt.recordId = dbRecord.Id;\r\n\t\tt.title = dbRecord.Title__c;\r\n\t\tt.completed = dbRecord.Completed__c;\r\n\t\tt.assignee = new TodoContact();\r\n\t\tt.assignee.name = dbRecord.Contact__r.Name;\r\n\t\tt.assignee.recordId = dbRecord.Contact__r.Id;\r\n\t}\t\r\n```\r\n\r\n- Ensure that the Contact__c is set to the contact o the logged in user when an assignee is not provided\r\n- Modify the TodoListService todo record selection retrieval criteria to include items in the list that are assigned to the user\r\n\r\n```java\r\n\tToDo_List__c newTodo = new ToDo_List__c();\r\n\tmapToDbRecord(t, newTodo);\r\n\tif(newTodo.Contact__c == null){\r\n\t\tnewTodo.Contact__c = contactId;\r\n\t}\r\n\tinsertList.add(newTodo);\r\n```\r\n\r\n```java\r\n\tprivate static ToDo_List__c[] retrieveListFromDb(Id userId, Id contactId){\r\n\t\treturn [\t\r\n\t\t\tSELECT \r\n\t\t\t\tId, \r\n\t\t\t\tTitle__c, \r\n\t\t\t\tCompleted__c,\r\n\t\t\t\tContact__r.Id,\r\n\t\t\t\tContact__r.Name\r\n\t\t\tFROM \r\n\t\t\t\tToDo_List__c\r\n\t\t\tWHERE\r\n\t\t\t\tOwnerId =: userId\r\n\t\t\tOR\r\n\t\t\t\tContact__c =: contactId\r\n\t\t\tORDER BY CreatedDate ASC];\r\n\t}\r\n```\r\n\r\n- Make the corresponding js model changes to accomodate the assignee:\r\n\t\t\t\r\n```js\r\n\tvar TodoContact = function(name, recordId){\r\n\t\tthis.name = ko.observable(name);\r\n\t\tthis.recordId = ko.observable(recordId);\r\n\t}\r\n\t// represent a single todo item\r\n\tvar Todo = function (title, recordId, completed, assignee) {\r\n\t\tthis.recordId = ko.observable(recordId == null? '' : recordId);\r\n\t\tthis.title = ko.observable(title);\r\n\t\tthis.completed = ko.observable(completed == null? false: completed);\r\n\t\tthis.editing = ko.observable(false);\r\n\t\tthis.assignee = ko.observable(assignee);\r\n\t};\r\n\t// map array of passed in todos to an observableArray of Todo objects\r\n\tself.todos = ko.observableArray(ko.utils.arrayMap(todos, function (todo) {\r\n\t\treturn new Todo(\r\n\t\t\t\ttodo.title, \r\n\t\t\t\ttodo.recordId, \r\n\t\t\t\ttodo.completed, \r\n\t\t\t\tnew TodoContact(\r\n\t\t\t\t\t\ttodo.assignee.name, \r\n\t\t\t\t\t\ttodo.assignee.recordId));\r\n\t}));\r\n``` \r\n- We also need to make sure that the assignee observable is set correctly from the response:\r\n\t\t\t\r\n```js\r\n\t// internal computed observable that fires whenever anything changes in our todos\r\n\tko.computed(function () {\r\n\t\twindow.todo.persistTodoList(self.todos, function(todos){\r\n\t\t\t_.each(todos, function(element, index, list){\r\n\t\t\t\t_.each(self.todos(), function(innerElement, innerIndex, innerList){\r\n\t\t\t\t\tif(element.title == innerElement.title() && \r\n\t\t\t\t\t\t\telement.recordId != innerElement.recordId()){\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tinnerElement.recordId(element.recordId);\r\n\t\t\t\t\t\tinnerElement.assignee(element.assignee);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t});\r\n\t}).extend({\r\n\t\tthrottle: 500\r\n\t}); // save at most twice per second\r\n```\r\n\r\n- Create a new observable for the contacts:\r\n\t\t\t\r\n```js\r\n\tself.contacts = ko.observableArray([]);\r\n```\r\n\r\n- load the contacts when the app is initialized\r\n\t\t\t\r\n```js\r\n\t....\r\n\t....\r\n\t\tself.reloadContacts = function(){\r\n\t\t\twindow.todo.loadContacts(function(contacts){\r\n\t\t\t\t_.each(contacts, function(element, index, list){\r\n\t\t\t\t\tself.contacts.push(new TodoContact(element.name, element.recordId));\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\twindow.todo.loadTodoList(function(todos){\r\n\t\t// bind a new instance of our view model to the page\r\n\t\tvar viewModel = new ViewModel(todos || []);\r\n\t\tko.applyBindings(viewModel);\r\n\r\n\t\t// set up filter routing\r\n\t\t/*jshint newcap:false */\r\n\t\tRouter({'/:filter': viewModel.showMode}).init();\r\n\t\t\r\n\t\t// load contacts\r\n\t\tviewModel.reloadContacts();\r\n\t});\r\n```\r\n\r\n- Add a function to assign the selected user to the todo list item:\r\n\t\t\t\r\n```js\r\n\tself.assignContact = function(todo, contact){\r\n\t\ttodo.assignee(contact);\r\n\t}\r\n```\r\n\r\n- Let's add the assignee control to the todo list (be sure to add it inside the view div):\r\n\t\t\t\r\n```html\r\n\t<div class=\"btn-group assignee\" >\r\n\t\t<a class=\"btn btn-primary btn-mini\" href=\"#\"><i class=\"icon-user icon-white\"></i> <span data-bind=\"text: assignee() != null ? assignee().name : ''\"></span></a>\r\n\t\t<a class=\"btn btn-primary btn-mini dropdown-toggle\" data-toggle=\"dropdown\" href=\"#\"><span class=\"caret\"></span></a>\r\n\t\t<ul class=\"dropdown-menu\" data-bind=\"foreach: {data: $root.contacts, as: 'contact'}\">\r\n\t\t\t <li><a href=\"#\" data-bind=\"click: $root.assignContact.bind($data, todo, contact)\"><i class=\"icon-hand-up\"></i> <span data-bind=\"text: name\"></span></a></li>\r\n\t\t</ul>\r\n\t</div>\r\n\t<div class=\"assignee-readonly\">\r\n\t\t<i class=\"icon-user icon-black\"></i> <span data-bind=\"text: assignee() != null ? assignee().name : ''\"></span>\r\n\t</div>\r\n```\r\n\r\n- The filteredTodos foreach should be changed to specify the alias:\r\n```html\r\n\tforeach: {data: filteredTodos, as: 'todo'}\r\n```\r\n\r\n- Wire it into the click event on the select-list:\r\n\t\t\t\r\n```html\r\n\t<li><a href=\"#\" data-bind=\"click: $root.assignContact.bind($data, todo, contact)\"><i class=\"icon-hand-up\"></i> <span data-bind=\"text: name\"></span></a></li>\r\n````\r\n\r\n- We should style the assignee drop down to make it seem more integrated and only allow changing the assignee for uncompleted tasks:\r\n- Change the body styling to body#todoappbody\r\n\r\n```css\r\n\t#todo-list li div.view div.assignee{\r\n\t\tdisplay: none;\r\n\t}\r\n\t#todo-list li.completed:hover div.view div.assignee{\r\n\t\tdisplay: none;\r\n\t}\r\n\t#todo-list li:hover div.view div.assignee{\r\n\t\tdisplay: block;\r\n\t\tfont-size: 14px;\r\n\t\tmargin-left: 45px;\r\n\t}\r\n\t#todo-list li:hover div.view div.assignee ul li{\r\n\t\tfont-size: 14px;\r\n\t}\r\n\t#todo-list li div.view div.assignee-readonly{\r\n\t\tdisplay: block;\r\n\t}\r\n\t#todo-list li.completed:hover div.view div.assignee-readonly{\r\n\t\tdisplay: block;\r\n\t}\r\n\t#todo-list li:hover div.view div.assignee-readonly{\r\n\t\tdisplay: none;\r\n\t}\r\n\t#todo-list li div.view div.assignee-readonly span{\r\n\t\tfont-size: 14px;\r\n\t}\r\n\t#todo-list li div.view div.assignee-readonly i{\r\n\t\tmargin-top: 8px;\r\n\t}\r\n\t#todo-list li div.view div.assignee-readonly{\r\n\t\tmargin-left: 45px;\r\n\t}\r\n\t#todo-list li:hover div.view div.assignee a.dropdown-toggle{\r\n\t\tmargin-left: -8px;\r\n\t}\r\n```\r\n\r\n## License\r\n\r\nMIT License\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}